<div class="min-h-screen bg-white flex">
    <div class="flex-1 flex flex-col justify-center py-12 px-4 sm:px-6 lg:flex-none lg:px-20 xl:px-24">
        <div class="mx-auto w-full max-w-sm lg:w-96">
            <div>
                <img class="h-12 w-auto" src="https://tailwindui.com/img/logos/workflow-mark-indigo-600.svg"
                    alt="Workflow">
                <h2 class="mt-6 text-3xl font-extrabold text-gray-900">
                    Create Static Pet
                </h2>
                <button type="submit" id="btn"
                    class=" mt-3 flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    Create
                </button>
            </div>

            <div class="mt-8">
                <div>
                    <div class="mt-6 relative">
                        <div class="absolute inset-0 flex items-center" aria-hidden="true">
                            <div class="w-full border-t border-gray-300"></div>
                        </div>
                        <div class="relative flex justify-center text-sm">
                            <span class="px-2 bg-white text-gray-500">
                                Upload Profile Picture
                            </span>
                        </div>
                    </div>
                </div>

                <div id="test" class="mt-6" style="visibility: collapse;">
                    <form class="space-y-6">
                        <div>
                            <label for="fileInput" class="block text-sm font-medium text-gray-700">
                                Select an image
                            </label>
                            <div class="mt-1">
                                <input id="input-files" name="file" type="file" accept="image/png, image/jpeg, image/gif"
                                    class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                            </div>
                        </div>


                        <div>
                            <button type="submit" id="btn2"
                                class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                Upload
                            </button>
                        </div>

                        
                    </form>
                    <div>
                            <button type="submit" id="btn1"
                                style="visibility: hidden;"
                                class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                Last Upload
                            </button>
                        </div>
                </div>
            </div>
        </div>
    </div>
    <div class="hidden lg:block relative w-0 flex-1">
        <img class="absolute inset-0 h-full w-full object-cover" style="max-width: 450px; max-height: 450px; object-fit:contain;"
            id="imagePreview" alt="">
    </div>
</div>

<script>
    /*Constants for buttons, image div */
    const btn = document.getElementById('btn');
    const btn1 = document.getElementById('btn1');
    const btn2 = document.getElementById('btn2')
    /*const imgContainerEl = document.getElementById('img-container');*/
    let idData = '';
    async function createPetHandler(event) {
        /* Images can only be uploaded after the pet has been created, so this is a two part process*/
        event.preventDefault();
        const owner_id = 2;
        const name = 'UploadTest';
        const age = 3;
        const breed = 'Testerb';
        const personality_trait = 'Determined';
        const bio = 'test';
        const response = await fetch('/api/pets', {
            method: 'post',
            body: JSON.stringify({
                owner_id,
                name,
                age,
                breed,
                personality_trait,
                bio,
            }),

            headers: { 'Content-Type': 'application/json' }
        }).catch(e => {
            console.log(e)
        });

        /* If the Pet was successfully created
        set the url of the action to include the newly
        created pet ID and show the file input field
        */
        if (response.ok) {

            const form = document.getElementById('test');
            /* Need the Response body in JSON to read objects*/
            const resData = await response.json();
            /* Grab the pet id */
            const id = resData.dbPetData.id
            /*store in global to use to retrieve last image uploaded*/
            idData = id;
            /*Hidden by default, show the field*/
            form.removeAttribute('style');

            async function imageUploadHandler(event) {
                event.preventDefault();
                const file = document.getElementById('input-files');
                const length = file.files.length;
                const fileData = file.files[0];
                /*check the file contents, dont send if field is empty*/
                console.log(fileData)
                if (length === 0) {
                    alert('You must select a file!');
                } else {
                    /*REMOVE ALL ALERTS FOR PRODUCTION
                        CHANGE ALERTS TO MODALS OR TOASTS
                    */
                    const fileType = file.files[0].name.split('.')[1];
                    console.log('checking file contents');
                    if (fileType === 'png' || fileType === 'jpg' || fileType === 'jpeg' || fileType === 'gif') {
                        if (fileData.size > 2 * 1024 * 1024) {
                            return alert('Images must be less than 2 MB')
                        } else {
                            console.log(`Uploading image`);
                            const formData = new FormData();
                            formData.append('file', fileData);
                            const imageUpload = await fetch('api/pets/upload/' + id, {
                                method: 'post',
                                body: formData,
                            }).catch(e => {
                                console.log(e)
                            });

                            if (imageUpload.ok) {
                                alert('Image successfully uploaded!');
                                btn1.setAttribute('style', 'visibility: visible;')
                                document.getElementById('imagePreview').setAttribute('src', '');
                                form.setAttribute('style', 'visibility: hidden;')
                            } else {
                                alert(imageUpload.statusText);
                            }
                        }
                    } else {
                        alert(`The ${fileType.toUpperCase()} file is not supported!`);
                    }
                }
            }
            btn2.addEventListener('click', imageUploadHandler);
        }
    }
    btn.addEventListener('click', createPetHandler);

    /*Actual Rendering will be slightly different blob process applies*/
    async function showImageHandler(event) {
        event.preventDefault();
        const response = await fetch(`/api/pets/${idData}`, {
            method: 'get',
            headers: { 'Content-Type': 'application/json' }
        }).then(res => {
            return res.json();
        }).catch(e => {
            console.log(e)
        });
        /*Grab the array buffer from response*/
        const imgData = response.profile_picture.data;
        /*Convert buffer to typed array */
        let typedArray = new Uint8Array(imgData);
        /*Convert array to Blob*/
        let blob = new Blob([typedArray], { type: 'image/jpeg' });
        /*create html img element*/
        const nImage = document.getElementById('imagePreview');
        /*set the img src to an object url*/
        nImage.src = URL.createObjectURL(blob);
        /*Append Image to page*/
        /*imgContainerEl.appendChild(nImage);*/
    }

    btn1.addEventListener('click', showImageHandler);

    /* IMAGE PREVIEW */
    function preview_image(event) {
        const reader = new FileReader();
        reader.onload = function () {
            const output = document.getElementById('imagePreview');
            output.src = reader.result;
        }
        reader.readAsDataURL(event.target.files[0]);
    }

    document.getElementById('input-files').addEventListener('change', preview_image);
</script>